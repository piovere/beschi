// This file was automatically generated by Beschi v0.2.0
// <https://github.com/sjml/beschi>
// Do not edit directly.

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace AppMessages
{
    public enum MessageType
    {
        Vector3MessageType = 1,
        NewCharacterMessageType = 2,
        CharacterJoinedTeamType = 3,
    }

    public class DataReadErrorException : Exception
    {
        public DataReadErrorException() { }

        public DataReadErrorException(string msg)
            : base(msg) { }

        public DataReadErrorException(string msg, Exception inner)
            : base(msg, inner) { }
    }

    public class UnknownMessageTypeException : Exception
    {
        public UnknownMessageTypeException() { }

        public UnknownMessageTypeException(string msg)
            : base(msg) { }

        public UnknownMessageTypeException(string msg, Exception inner)
            : base(msg, inner) { }
    }

    public abstract class Message
    {
        abstract public MessageType GetMessageType();
        abstract public void WriteBytes(BinaryWriter bw, bool tag);
        abstract public int GetSizeInBytes();

        public static Message[] ProcessRawBytes(BinaryReader br)
        {
            List<Message> msgList = new List<Message>();
            while (br.BaseStream.Position < br.BaseStream.Length)
            {
                byte msgType = br.ReadByte();
                switch (msgType)
                {
                    case 0:
                        return msgList.ToArray();
                    case (byte)MessageType.Vector3MessageType:
                        msgList.Add(Vector3Message.FromBytes(br));
                        break;
                    case (byte)MessageType.NewCharacterMessageType:
                        msgList.Add(NewCharacterMessage.FromBytes(br));
                        break;
                    case (byte)MessageType.CharacterJoinedTeamType:
                        msgList.Add(CharacterJoinedTeam.FromBytes(br));
                        break;
                    default:
                        throw new UnknownMessageTypeException(String.Format("Unknown message type: {0}", msgType));
                }
            }
            return msgList.ToArray();
        }
    }

    public enum CharacterClass : byte
    {
        Fighter = 0,
        Wizard = 1,
        Rogue = 2,
        Cleric = 3,
    }

    public enum TeamRole : byte
    {
        Minion = 0,
        Ally = 1,
        Leader = 2,
    }

    public class Color
    {
        public float red;
        public float green;
        public float blue;
        public float alpha;

        public static Color FromBytes(BinaryReader br)
        {
            Color _nColor = new Color();
            _nColor.red = br.ReadSingle();
            _nColor.green = br.ReadSingle();
            _nColor.blue = br.ReadSingle();
            _nColor.alpha = br.ReadSingle();
            return _nColor;
        }
        public void WriteBytes(BinaryWriter bw)
        {
            bw.Write(this.red);
            bw.Write(this.green);
            bw.Write(this.blue);
            bw.Write(this.alpha);
        }

    }

    public class Spectrum
    {
        public Color defaultColor = new Color();
        public List<Color> colors = new List<Color>();

        public static Spectrum FromBytes(BinaryReader br)
        {
            Spectrum _nSpectrum = new Spectrum();
            _nSpectrum.defaultColor = Color.FromBytes(br);
            ushort colors_Length = br.ReadUInt16();
            _nSpectrum.colors = new List<Color>();
            for (int i3 = 0; i3 < colors_Length; i3++)
            {
                Color el = Color.FromBytes(br);
                _nSpectrum.colors.Add(el);
            }
            return _nSpectrum;
        }
        public void WriteBytes(BinaryWriter bw)
        {
            this.defaultColor.WriteBytes(bw);
            bw.Write((ushort)this.colors.Count);
            foreach (Color el in this.colors)
            {
                el.WriteBytes(bw);
            }
        }

    }

    public class Vector3Message : Message
    {
        public float x;
        public float y;
        public float z;

        public override MessageType GetMessageType() { return MessageType.Vector3MessageType; }

        public override int GetSizeInBytes()
        {
            return 12;
        }

        public static Vector3Message FromBytes(BinaryReader br)
        {
            try
            {
                Vector3Message _nVector3Message = new Vector3Message();
                _nVector3Message.x = br.ReadSingle();
                _nVector3Message.y = br.ReadSingle();
                _nVector3Message.z = br.ReadSingle();
                return _nVector3Message;
            }
            catch (System.IO.EndOfStreamException)
            {
                throw new DataReadErrorException(String.Format("Could not read Vector3Message from offset {0}", br.BaseStream.Position));
            }
        }
        public override void WriteBytes(BinaryWriter bw, bool tag)
        {
            if (tag)
            {
                bw.Write((byte)MessageType.Vector3MessageType);
            }
            bw.Write(this.x);
            bw.Write(this.y);
            bw.Write(this.z);
        }

    }

    public class NewCharacterMessage : Message
    {
        public ulong id;
        public string characterName = "";
        public CharacterClass job = CharacterClass.Fighter;
        public ushort strength;
        public ushort intelligence;
        public ushort dexterity;
        public ushort wisdom;
        public uint goldInWallet;
        public List<string> nicknames = new List<string>();

        public override MessageType GetMessageType() { return MessageType.NewCharacterMessageType; }

        public override int GetSizeInBytes()
        {
            int size = 0;
            size += this.characterName.Length;
            foreach (string s in this.nicknames)
            {
                size += 1 + System.Text.Encoding.UTF8.GetBytes(s).Length;
            }
            size += 24;
            return size;
        }

        public static NewCharacterMessage FromBytes(BinaryReader br)
        {
            try
            {
                NewCharacterMessage _nNewCharacterMessage = new NewCharacterMessage();
                _nNewCharacterMessage.id = br.ReadUInt64();
                byte characterName_Length = br.ReadByte();
                byte[] characterName_Buffer = br.ReadBytes((int)characterName_Length);
                _nNewCharacterMessage.characterName = System.Text.Encoding.UTF8.GetString(characterName_Buffer);
                byte _job = br.ReadByte();
                if (!Enum.IsDefined(typeof(CharacterClass), _job))
                {
                    throw new DataReadErrorException(String.Format("Enum {0} out of range for CharacterClass", _job));
                }
                _nNewCharacterMessage.job = (CharacterClass)_job;
                _nNewCharacterMessage.strength = br.ReadUInt16();
                _nNewCharacterMessage.intelligence = br.ReadUInt16();
                _nNewCharacterMessage.dexterity = br.ReadUInt16();
                _nNewCharacterMessage.wisdom = br.ReadUInt16();
                _nNewCharacterMessage.goldInWallet = br.ReadUInt32();
                ushort nicknames_Length = br.ReadUInt16();
                _nNewCharacterMessage.nicknames = new List<string>();
                for (int i4 = 0; i4 < nicknames_Length; i4++)
                {
                    byte string_el_Length = br.ReadByte();
                    byte[] string_el_Buffer = br.ReadBytes((int)string_el_Length);
                    string el = System.Text.Encoding.UTF8.GetString(string_el_Buffer);
                    _nNewCharacterMessage.nicknames.Add(el);
                }
                return _nNewCharacterMessage;
            }
            catch (System.IO.EndOfStreamException)
            {
                throw new DataReadErrorException(String.Format("Could not read NewCharacterMessage from offset {0}", br.BaseStream.Position));
            }
        }
        public override void WriteBytes(BinaryWriter bw, bool tag)
        {
            if (tag)
            {
                bw.Write((byte)MessageType.NewCharacterMessageType);
            }
            bw.Write(this.id);
            byte[] characterName_Buffer = System.Text.Encoding.UTF8.GetBytes(this.characterName);
            bw.Write((byte)characterName_Buffer.Length);
            bw.Write(characterName_Buffer);
            bw.Write((byte)this.job)
            bw.Write(this.strength);
            bw.Write(this.intelligence);
            bw.Write(this.dexterity);
            bw.Write(this.wisdom);
            bw.Write(this.goldInWallet);
            bw.Write((ushort)this.nicknames.Count);
            foreach (string el in this.nicknames)
            {
                byte[] el_Buffer = System.Text.Encoding.UTF8.GetBytes(el);
                bw.Write((byte)el_Buffer.Length);
                bw.Write(el_Buffer);
            }
        }

    }

    public class CharacterJoinedTeam : Message
    {
        public ulong characterID;
        public string teamName = "";
        public List<Color> teamColors = new List<Color>();
        public TeamRole role = TeamRole.Minion;

        public override MessageType GetMessageType() { return MessageType.CharacterJoinedTeamType; }

        public override int GetSizeInBytes()
        {
            int size = 0;
            size += this.teamName.Length;
            size += this.teamColors.Count * 16;
            size += 12;
            return size;
        }

        public static CharacterJoinedTeam FromBytes(BinaryReader br)
        {
            try
            {
                CharacterJoinedTeam _nCharacterJoinedTeam = new CharacterJoinedTeam();
                _nCharacterJoinedTeam.characterID = br.ReadUInt64();
                byte teamName_Length = br.ReadByte();
                byte[] teamName_Buffer = br.ReadBytes((int)teamName_Length);
                _nCharacterJoinedTeam.teamName = System.Text.Encoding.UTF8.GetString(teamName_Buffer);
                ushort teamColors_Length = br.ReadUInt16();
                _nCharacterJoinedTeam.teamColors = new List<Color>();
                for (int i4 = 0; i4 < teamColors_Length; i4++)
                {
                    Color el = Color.FromBytes(br);
                    _nCharacterJoinedTeam.teamColors.Add(el);
                }
                byte _role = br.ReadByte();
                if (!Enum.IsDefined(typeof(TeamRole), _role))
                {
                    throw new DataReadErrorException(String.Format("Enum {0} out of range for TeamRole", _role));
                }
                _nCharacterJoinedTeam.role = (TeamRole)_role;
                return _nCharacterJoinedTeam;
            }
            catch (System.IO.EndOfStreamException)
            {
                throw new DataReadErrorException(String.Format("Could not read CharacterJoinedTeam from offset {0}", br.BaseStream.Position));
            }
        }
        public override void WriteBytes(BinaryWriter bw, bool tag)
        {
            if (tag)
            {
                bw.Write((byte)MessageType.CharacterJoinedTeamType);
            }
            bw.Write(this.characterID);
            byte[] teamName_Buffer = System.Text.Encoding.UTF8.GetBytes(this.teamName);
            bw.Write((byte)teamName_Buffer.Length);
            bw.Write(teamName_Buffer);
            bw.Write((ushort)this.teamColors.Count);
            foreach (Color el in this.teamColors)
            {
                el.WriteBytes(bw);
            }
            bw.Write((byte)this.role)
        }

    }

}
