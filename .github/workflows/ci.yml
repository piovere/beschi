name: Verification Tests

on:
  push

jobs:
  ci-linux:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '^1.19'
    # seems the environments already come with recent-ish Swift!
    # - name: Setup Swift
    #   uses: fwal/setup-swift@v1
    #   with:
    #     swift-version: '5.5'
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Setup Zig
      uses: mlugg/setup-zig@v1
      with:
        version: 0.13.0
    - name: Install System Prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install valgrind
    - name: Install Beschi and Python Prerequisites
      run: |
        python -m pip install --upgrade pip
        pip install '.[dev]'
    - name: Run Tests (Non-C)
      run: pytest --skip c
    - name: Run C Tests (clang)
      run: CC=clang CXX=clang++ pytest --only c
    - name: Run C Tests (gcc)
      run: CC=gcc-9 CXX=g++-9 pytest --only c


  ci-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Beschi and Python Prerequisites
      run: |
        python -m pip install --upgrade pip
        pip install '.[dev]'
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    - name: Run Tests
      run: pytest --only c


  build-dist:
    runs-on: ubuntu-20.04
    needs: [ci-linux, ci-windows]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install Prerequisites
      run: |
        python -m pip install --upgrade pip
        pip install '.[publish]'
    - name: Check Version
      run: |
        version=$(beschi --version | awk '{print $NF}')
        git_tag=$(${{ github.ref_name }})
        if [[ $version != $git_tag ]]; then
          echo "Git tag does not match version string."
          exit 1
        fi
    - name: Build Distribution Package
      run: |
        rm -rf dist
        python -m build
    - name: Upload Distribution Artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-pypi:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/beschi
    permissions:
      id-token: write
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-brew:
    runs-on: macos-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Set Version Variable
      run: echo "BESCHI_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Setup Git Credentials
      env:
        SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
      run: |
        SSH_PATH="$HOME/.ssh"
        mkdir -p "$SSH_PATH"
        echo "$SSH_DEPLOY_KEY" > "$SSH_PATH/deploy_key"
        chmod 600 "$SSH_PATH/deploy_key"
        ssh-keyscan -H "github.com" > "$SSH_PATH/known_hosts"
        echo "GIT_SSH_COMMAND="ssh -vvv -i $SSH_PATH/deploy_key -o UserKnownHostsFile=$SSH_PATH/known_hosts"" >> $GITHUB_ENV
    - name: Clone Personal Homebrew Repo
      env:
        PUSHER_NAME: ${{ github.event.pusher.name }}
        PUSHER_EMAIL: ${{ github.event.pusher.email }}
      run: |
        git config --global user.name "$PUSHER_NAME"
        git config --global user.email "$PUSHER_EMAIL"
        git clone git@github.com:sjml/homebrew-sjml.git homebrew-sjml
    - name: Update Local Tap
      # doing manually since `brew bump-formula-pr` has a long installation and wants a PAT?
      #    probably useful if you want to open a PR to the core Homebrew repo, but we're just
      #    gonna push directly.
      run: |
        wget "https://github.com/sjml/beschi/archive/refs/tags/$BESCHI_VERSION.tar.gz"
        SHA256_SUM=($(shasum -a 256 $BESCHI_VERSION.tar.gz))
        cd homebrew-sjml
        sed -i .bak -E "s/(\s*)url (.*)$/\1url \"https:\/\/github.com\/sjml\/beschi\/archive\/refs\/tags\/$BESCHI_VERSION.tar.gz\"/" Formula/beschi.rb
        sed -i .bak -E "s/(\s*)sha256 (.*)$/\1sha256 \"$SHA256_SUM\"/" Formula/beschi.rb
        rm Formula/*.bak
    - name: Commit and Push to Remote
      run: |
        cd homebrew-sjml
        git add .
        git commit -m "Updating beschi to $BESCHI_VERSION"
        echo "Pushing to remote..."
        git push
